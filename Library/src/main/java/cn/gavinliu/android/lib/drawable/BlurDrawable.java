package cn.gavinliu.android.lib.drawable;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.ColorFilter;import android.graphics.Paint;import android.graphics.PorterDuff;import android.graphics.PorterDuffColorFilter;import android.graphics.drawable.BitmapDrawable;import android.graphics.drawable.ColorDrawable;import android.graphics.drawable.Drawable;import android.graphics.drawable.TransitionDrawable;import android.os.AsyncTask;import android.support.v7.graphics.Palette;import android.view.Gravity;/** * Created by GavinLiu on 2015-07-02 */public class BlurDrawable extends TransitionDrawable {    private int blurSize;    private int blurGravity;    private boolean usePalette;    private Resources resources;    public BlurDrawable(Resources res, Bitmap bitmap, int blurGravity, int blurSize, boolean usePalette) {        super(new Drawable[]{new ColorDrawable(0xACCCCCCC), new ColorDrawable(Color.TRANSPARENT)});        setId(0, 0);        setId(1, 1);        resources = res;        this.blurSize = blurSize;        this.usePalette = usePalette;        this.blurGravity = blurGravity;        new BlurTask().execute(bitmap);    }    class BlurTask extends AsyncTask<Bitmap, Void, Bitmap> {        @Override        protected Bitmap doInBackground(Bitmap... params) {            if (params == null || params.length < 1) {                return null;            }            Paint paint = new Paint();            Paint blurPaint = new Paint();            Bitmap bitmap = params[0];            BlurManager mBlurManager = new BlurManager(bitmap);            Bitmap blurredBitmap = mBlurManager.process(100);            if (usePalette) {                Palette palette = Palette.from(bitmap).generate();                Palette.Swatch swatch = palette.getLightVibrantSwatch();                if (swatch == null) {                    swatch = palette.getLightMutedSwatch();                }                if (swatch == null) {                    swatch = palette.getDarkVibrantSwatch();                }                if (swatch == null) {                    swatch = palette.getDarkMutedSwatch();                }                ColorFilter colorFilter = new PorterDuffColorFilter((swatch.getRgb() & 0xCCFFFFFF), PorterDuff.Mode.SRC_OVER);                blurPaint.setColorFilter(colorFilter);            }            int bitmapLeft = 0, bitmapTop = 0, bitmapRight = 0, bitmapBottom = 0;            int blurredBitmapLeft = 0, blurredBitmapTop = 0, blurredBitmapRight = 0, blurredBitmapBottom = 0;            switch (blurGravity) {                case Gravity.FILL:                    blurredBitmapRight = bitmap.getWidth();                    blurredBitmapBottom = bitmap.getHeight();                    break;                case Gravity.TOP:                    blurredBitmapRight = bitmap.getWidth();                    blurredBitmapBottom = blurSize;                    bitmapTop = blurSize;                    bitmapRight = bitmap.getWidth();                    bitmapBottom = bitmap.getHeight();                    break;                case Gravity.BOTTOM:                    bitmapRight = bitmap.getWidth();                    bitmapBottom = bitmap.getHeight() - blurSize;                    blurredBitmapTop = bitmap.getHeight() - blurSize;                    blurredBitmapRight = bitmap.getWidth();                    blurredBitmapBottom = bitmap.getHeight();                    break;                case Gravity.LEFT:                    blurredBitmapRight = blurSize;                    blurredBitmapBottom = bitmap.getHeight();                    bitmapLeft = blurSize;                    bitmapRight = bitmap.getWidth();                    bitmapBottom = bitmap.getHeight();                    break;                case Gravity.RIGHT:                    bitmapRight = bitmap.getWidth() - blurSize;                    bitmapBottom = bitmap.getHeight();                    blurredBitmapLeft = bitmap.getWidth() - blurSize;                    blurredBitmapRight = bitmap.getWidth();                    blurredBitmapBottom = bitmap.getHeight();                    break;            }            Bitmap result = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getHeight(), Bitmap.Config.ARGB_8888);            Canvas canvas = new Canvas(result);            canvas.save();            canvas.clipRect(bitmapLeft, bitmapTop, bitmapRight, bitmapBottom);            canvas.drawBitmap(bitmap, 0, 0, paint);            canvas.restore();            canvas.save(Canvas.CLIP_SAVE_FLAG);            canvas.clipRect(blurredBitmapLeft, blurredBitmapTop, blurredBitmapRight, blurredBitmapBottom);            canvas.drawBitmap(blurredBitmap, 0, 0, blurPaint);            canvas.restore();            bitmap.recycle();            blurredBitmap.recycle();            return result;        }        @Override        protected void onPostExecute(Bitmap result) {            if (result == null) {                return;            }            BitmapDrawable bitmapDrawable = new BitmapDrawable(resources, result);            setDrawableByLayerId(1, bitmapDrawable);            startTransition(250);        }    }}